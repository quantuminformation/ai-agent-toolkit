import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath, pathToFileURL } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const root = path.resolve(__dirname, '..');
const blogRoutesDir = path.join(root, 'js', 'routes', 'blog');

const extractPreview = (html) => {
  const match = /<div class="preview">([\s\S]*?)<\/div>/i.exec(html);
  const text = match ? match[1].replace(/<[^>]+>/g, '').trim() : '';
  const words = text.split(/\s+/).slice(0, 30);
  return words.join(' ');
};

const extractImage = (html) => {
  const match = /<img[^>]+src=["']([^"']+)["']/i.exec(html);
  return match ? match[1] : '/img/nikos.jpg';
};

const extractTitle = (html, fallback) => {
  const match = /<h1[^>]*>([^<]+)<\/h1>/i.exec(html);
  if (match) return match[1].trim();
  return fallback;
};

const humanizeSlug = (slug) =>
  slug
    .replace(/^\d+-/, '')
    .split('-')
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(' ');

const loadBlogModules = async () => {
  const files = (await fs.readdir(blogRoutesDir)).filter(
    (file) => file.endsWith('.js') && file !== 'posts.js' && file !== 'tags.js',
  );

  const modules = await Promise.all(
    files.map((file) => import(pathToFileURL(path.join(blogRoutesDir, file))).catch(() => null)),
  );

  const entries = files.map((file, index) => {
    const module = modules[index] || {};
    const slug = file.replace(/\.js$/, '');
    const url = `/blog/${slug}`;
    const rawDate = module.date instanceof Date ? module.date : module.date ? new Date(module.date) : null;
    const date = rawDate && !Number.isNaN(rawDate) ? rawDate : null;
    const content = module.content || '';

    return {
      slug,
      url,
      title: extractTitle(content, humanizeSlug(slug)),
      author: module.author || 'Unknown',
      date,
      isoDate: date ? date.toISOString() : null,
      content,
    };
  });

  entries.sort((a, b) => {
    if (a.date && b.date) return a.date - b.date;
    if (a.date) return -1;
    if (b.date) return 1;
    return a.slug.localeCompare(b.slug);
  });

  return entries;
};

const writePostsModule = async (posts) => {
  const lines = posts
    .map((post) => {
      const items = [
        `    title: ${JSON.stringify(post.title)},`,
        `    url: ${JSON.stringify(post.url)},`,
        `    author: ${JSON.stringify(post.author)},`,
      ];
      if (post.isoDate) {
        items.push(`    date: ${JSON.stringify(post.isoDate)},`);
      }
      return `  {
${items.join('\n')}
  }`;
    })
    .join(',\n');

  const header = `// Auto-generated by scripts/build-blog.mjs. Do not edit manually.\n`;
  const content = `${header}export const POSTS = [\n${lines}\n];\n`;
  await fs.writeFile(path.join(blogRoutesDir, 'posts.js'), content);
};

const template = ({ title, description, image, url, content }) => `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="${title}">
    <meta property="og:description" content="${description}">
    <meta property="og:image" content="${image}">
    <meta property="og:url" content="${url}">
    <meta property="twitter:title" content="${title}">
    <meta property="twitter:description" content="${description}">
    <meta property="twitter:image" content="${image}">
    <meta property="twitter:url" content="${url}">
    <meta name="twitter:card" content="${image ? 'summary_large_image' : 'summary'}">
    <link rel="icon" href="data:,">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/modern-normalize/2.0.0/modern-normalize.min.css">
    <link rel="stylesheet" href="/css/reset.css">
    <link rel="stylesheet" href="/css/utility.css">
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/form.css">
    <link rel="stylesheet" href="/css/button-badge.css">
    <link rel="stylesheet" href="/css/typography.css">
    <link rel="stylesheet" href="/css/light.css" media="(prefers-color-scheme: light)">
    <link rel="stylesheet" href="/css/dark.css" media="(prefers-color-scheme: dark)">
    <script src="/js/store.js" defer type="module"></script>
    <script src="/js/componentLoader.js" defer type="module"></script>
  </head>
  <body class="flex flex-col">
    <div class="site-container flex flex-col" style="flex: 1">
      <nav data-component="nav" data-header-bar="true" data-burger-px="400"></nav>
      <main data-component="router" style="padding: 1rem; width: 100%; flex: 1">
        ${content}
      </main>
      <div class="flex justify-center">
        <a href="https://github.com/quantuminformation/vanillajs-patterns" target="_blank">
          Fork me on GitHub
        </a>
      </div>
    </div>
    <footer>
      <span>Copyright Nikos Katsikanis LTD</span>
      <div data-component="theme-switcher"></div>
    </footer>
  </body>
</html>`;

const posts = await loadBlogModules();
await writePostsModule(posts);

for (const post of posts) {
  const rel = post.url.replace(/^\//, '');
  const content = post.content || '';
  const description = extractPreview(content);
  const image = extractImage(content);
  const html = template({ title: post.title, description, image, url: post.url, content });
  const outDir = path.join(root, rel);
  await fs.mkdir(outDir, { recursive: true });
  await fs.writeFile(path.join(outDir, 'index.html'), html);
}

const blogIndexHtml = template({
  title: 'Blog',
  description: 'Latest posts',
  image: '',
  url: '/blog',
  content: '<div data-component="blog-list"></div>',
});
await fs.writeFile(path.join(root, 'blog', 'index.html'), blogIndexHtml);
